#version 450
layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout ( std430, set = 0, binding = 1 ) buffer OctreeStorageBuffer
{ 
	uvec2 data[]; 
} uOctree;

layout ( std430, set = 0, binding = 2 ) readonly buffer FragmentListStorageBuffer
{ 
	uvec2 data[]; 
} uFragmentList;

layout ( push_constant ) uniform constants
{
	uint fragmentNum;
	uint voxelResolution;
	uint targetLevel;
} uPushConstants;

// Below schemes are referred from OpenGL Insight Chapter 22
vec4 convRGBA8ToVec4( uint val);
uint convVec4ToRGBA8( vec4 val);
void atomicRGBA8Avg	( uint index, vec4 val );

void main()
{
    if (gl_GlobalInvocationID.x >= uPushConstants.fragmentNum)
	{
		return;
	}
	
	uvec2 fragmentData = uFragmentList.data[gl_GlobalInvocationID.x];
	uvec3 fragPos = uvec3(
		fragmentData.x & 0xfffu, 
		(fragmentData.x >> 12u) & 0xfffu,
		((fragmentData.x >> 24u) & 0xffu) | ((fragmentData.y >> 20u) & 0xf00u)
	) >> 1 ; // TODO(snowapril) : why scale half work?

	uint resolution = uPushConstants.voxelResolution;
	uint targetResolution = 1 << uPushConstants.targetLevel;
	uint idx = 0, cur = 0; 
	uvec3 cmp;
	do {
		resolution >>= 1;
		cmp = uvec3(greaterThanEqual(fragPos, uvec3(resolution)));
		idx = cur + (cmp.z | (cmp.x << 1) | (cmp.y << 2));  // TODO(snowapril) : why rotation work?
		cur = uOctree.data[idx].x & 0x7fffffff; // Without MSB flag
		fragPos -= cmp * resolution;
	} while (cur != 0u && resolution > uPushConstants.targetLevel); // TODO(snowapril) : why 1 << targetLevel not work

	if (resolution == uPushConstants.targetLevel)
	{
		uint childIndex = uOctree.data[idx].x & 0x7fffffff;
 		vec4 childValueSum = vec4(0);
		for (uint j = 0; j < 8; ++j)
		{
			childValueSum += convRGBA8ToVec4(uOctree.data[childIndex + j].y) / 8.0;
		}
		uOctree.data[idx].y = convVec4ToRGBA8(childValueSum);
		// atomicRGBA8Avg(idx, childValueSum);
	}
}

vec4 convRGBA8ToVec4( uint val) {
	return vec4(
	 	float(( val & 0x000000FF )),
	 	float(( val & 0x0000FF00 ) >> 8U ),
	 	float(( val & 0x00FF0000 ) >> 16U),
	 	float(( val & 0xFF000000 ) >> 24U) 
	);
}
uint convVec4ToRGBA8( vec4 val) {
	return (uint(val.w) & 0x000000FF ) << 24U | 
	   	   (uint(val.z) & 0x000000FF ) << 16U | 
	   	   (uint(val.y) & 0x000000FF ) <<  8U | 
	   	   (uint(val.x) & 0x000000FF );
}

void atomicRGBA8Avg( uint index, vec4 val )
{
	// val.rgb *= 255.0f; // Optimise following calculations
	uint newVal = convVec4ToRGBA8(val);
	uint prevStoredVal = 0; uint curStoredVal;

	// Loop as long as destination value gets changed by other threads
	while ( ( curStoredVal = atomicCompSwap( uOctree.data[index].y, prevStoredVal, newVal )) != prevStoredVal) 
	{
		prevStoredVal = curStoredVal;
		vec4 rval = convRGBA8ToVec4( curStoredVal);
		rval.xyz = (rval.xyz * rval.w); 	// Denormalize
		vec4 curValF = rval + val; 			// Add new value
		curValF.xyz /= (curValF.w); 		// Renormalize
		newVal = convVec4ToRGBA8(curValF);
	}
}